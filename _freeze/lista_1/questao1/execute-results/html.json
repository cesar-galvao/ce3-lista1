{
  "hash": "f6fb31d028d4ef7db8776c04289fc27f",
  "result": {
    "markdown": "---\ntitle: \"Questão 1\"\nsubtitle: \"Leitura eficiente de dados\"\n---\n\n::: {.cell}\n\n:::\n\n\n\n<style>\nbody {\ntext-align: justify}\n</style>\n\n\n## Item a)\n\nVerificando a página do link disponibilizado e inspecionando links de dois estados, obtém-se:\n\n* **AC parte 1** -- https://s3.sa-east-1.amazonaws.com/ckan.saude.gov.br/SIPNI/COVID/uf/uf%3DAC/part-00000-cebaa94c-82a9-46e2-8c12-9cc16a61b38b.c000.csv\n* **AC parte 2** -- https://s3.sa-east-1.amazonaws.com/ckan.saude.gov.br/SIPNI/COVID/uf/uf%3DAC/part-00001-cebaa94c-82a9-46e2-8c12-9cc16a61b38b.c000.csv -- \n* **AL parte 1** -- https://s3.sa-east-1.amazonaws.com/ckan.saude.gov.br/SIPNI/COVID/uf/uf%3DAL/part-00000-cebaa94c-82a9-46e2-8c12-9cc16a61b38b.c000.csv\n\nNota-se que a diferenciação quanto à UF ocorre em `uf%3D**` e que a diferenciação quanto à parte do download ocorre logo em seguida em `part-0000*`, iniciando a contagem em zero. Além disso, fica evidente que se trata de um arquivo `.csv`. \n\nO código a seguir cria uma pasta, caso não exista, e varre a combinação de três partes para as UF: AC, AL, AM e AP.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npath <- \"../dados_de_trabalhos/lista_1/datasus/\"\n\n# verifica e cria pasta\nif(!dir.exists(path)){\n  dir.create(path)\n}\n\n# cria vetores sobre os quais se ira iterar\niterate <- tibble(\n  uf = rep(c('AC', 'AL', 'AM', 'AP'), each = 3),\n  partes = rep(c(0:2), 4)\n) %>%\n  transmute(caminho = paste0(\n      \"https://s3.sa-east-1.amazonaws.com/ckan.saude.gov.br/SIPNI/COVID/uf/uf%3D\",\n            uf,\n            \"/part-0000\",\n            partes,\n            \"-cebaa94c-82a9-46e2-8c12-9cc16a61b38b.c000.csv\"),\n      destfile = paste0(\n        path,uf, partes, \".csv\"\n      ))\n\n# varre os vetores realizando o download\nwalk2(iterate$caminho, iterate$destfile,\n      function(x, y) download.file(url = x, destfile = y))\n```\n:::\n\n\nVemos a seguir que houve sucesso no download:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlist.files(path)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] \"AC0.csv\" \"AC1.csv\" \"AC2.csv\" \"AL0.csv\" \"AL1.csv\" \"AL2.csv\" \"AM0.csv\"\n [8] \"AM1.csv\" \"AM2.csv\" \"AP0.csv\" \"AP1.csv\" \"AP2.csv\"\n```\n:::\n:::\n\n\n## Item b)\n\nCarregamos o pacote `vroom` usando a função `pacman::p_load()` e carregamos o primeiro dos arquivos, correspondente à primeira parte de dados para o estado do Acre.\n\nUtilizando a função `dplyr::glimpse()`, verificamos que há 553.953 observações de 32 variáveis neste banco de dados. Além disso, nota-se que a função `vroom()` identificou com sucesso diversos tipos de dados das colunas, inclusive de datas. No entanto, colunas com números identificadores foram classificadas como números, o que pode trazer problemas se o número, como ocorre com o cadastro de pessoa física, inicia em um zero.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(tidyverse, vroom)\n\ndados1 <- vroom(paste0(path, \"AC0.csv\"))\nglimpse(dados1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 553,953\nColumns: 32\n$ document_id                              <chr> \"625df13b-f8c3-4ac4-8947-ee51…\n$ paciente_id                              <chr> \"7cf8dee49735df8d59d105db77d9…\n$ paciente_idade                           <dbl> 57, 39, 9, 44, 68, 38, 43, 24…\n$ paciente_dataNascimento                  <date> 1965-07-28, 1982-03-20, 2012…\n$ paciente_enumSexoBiologico               <chr> \"M\", \"F\", \"M\", \"M\", \"M\", \"F\",…\n$ paciente_racaCor_codigo                  <chr> \"04\", \"03\", \"03\", \"04\", \"01\",…\n$ paciente_racaCor_valor                   <chr> \"AMARELA\", \"PARDA\", \"PARDA\", …\n$ paciente_endereco_coIbgeMunicipio        <dbl> 120050, 120040, 120013, 12004…\n$ paciente_endereco_coPais                 <dbl> 10, 10, 10, 10, 10, 10, 10, 1…\n$ paciente_endereco_nmMunicipio            <chr> \"SENA MADUREIRA\", \"RIO BRANCO…\n$ paciente_endereco_nmPais                 <chr> \"BRASIL\", \"BRASIL\", \"BRASIL\",…\n$ paciente_endereco_uf                     <chr> \"AC\", \"AC\", \"AC\", \"AC\", \"AC\",…\n$ paciente_endereco_cep                    <chr> \"69940\", \"69919\", \"69926\", NA…\n$ paciente_nacionalidade_enumNacionalidade <chr> \"B\", \"B\", \"B\", \"B\", \"B\", \"B\",…\n$ estabelecimento_valor                    <chr> \"6697151\", \"6917291\", \"200287…\n$ estabelecimento_razaoSocial              <chr> \"MINISTERIO DA SAUDE\", \"PREFE…\n$ estalecimento_noFantasia                 <chr> \"DISTRITO SANITARIO ESPECIAL …\n$ estabelecimento_municipio_codigo         <dbl> 120050, 120040, 120013, 12004…\n$ estabelecimento_municipio_nome           <chr> \"SENA MADUREIRA\", \"RIO BRANCO…\n$ estabelecimento_uf                       <chr> \"AC\", \"AC\", \"AC\", \"AC\", \"AC\",…\n$ vacina_grupoAtendimento_codigo           <chr> \"000701\", \"000923\", \"000207\",…\n$ vacina_grupoAtendimento_nome             <chr> \"Povos indígenas em terras in…\n$ vacina_categoria_codigo                  <dbl> 7, 9, NA, 14, 2, 2, 2, 2, 2, …\n$ vacina_categoria_nome                    <chr> \"Povos Indígenas\", \"Trabalhad…\n$ vacina_lote                              <chr> \"202001\", \"210139\", \"FP8290\",…\n$ vacina_fabricante_nome                   <chr> \"PFIZER\", \"SINOVAC/BUTANTAN\",…\n$ vacina_fabricante_referencia             <chr> \"28290\", \"Organization/611894…\n$ vacina_dataAplicacao                     <date> 2022-08-31, 2021-06-17, 2022…\n$ vacina_descricao_dose                    <chr> \"2º Reforço\", \"2ª Dose\", \"1ª …\n$ vacina_codigo                            <dbl> 87, 86, 99, 86, 87, 87, 85, 8…\n$ vacina_nome                              <chr> \"COVID-19 PFIZER - COMIRNATY\"…\n$ sistema_origem                           <chr> \"Novo PNI\", \"Novo PNI\", \"Novo…\n```\n:::\n:::\n\n\n## Item c)\n\nA seguir verificamos o tamanho em disco do arquivo que estamos explorando e o tamanho do objeto criado após a leitura para a memória.\n\nInteressantemente, parece haver uma pequena economia de *bytes*. No entanto, o espaço ocupado em memória é proporcionalmente mais custoso em relação ao que está no disco rígido.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#tamanho em megabytes do arquivo\nfile.size(paste0(path, \"AC0.csv\"))*10^(-6)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 283.0886\n```\n:::\n\n```{.r .cell-code}\n#tamanho do objeto\nformat(object.size(dados1), units = \"Mb\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"256.6 Mb\"\n```\n:::\n:::\n\n\n## Item d)\n\nQuando filtramos o arquivo diretamente no procedimento de leitura mediante a utilização de uma conexão `pipe()` para filtrar as vacinas da Janssen, verificamos que apenas 19.623 linhas foram incluídas, assim como todas as 32 variáveis que descrevem cada observação.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# leitura filtrada\ncomando_grep <- \"grep -e vacina_fabricante_nome -e JANSSEN ../../dados_de_trabalhos/lista_1/datasus/AC0.csv\"\n\ndados_jan <- vroom(pipe(comando_grep), \n                     locale = locale(\"br\", encoding = \"latin1\")\n)\n\n# tamanho\nformat(object.size(dados_jan), units = \"Mb\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"9.8 Mb\"\n```\n:::\n:::\n\n\nQuanto ao tamanho do objeto em memória, reduzimos de `format(object.size(dados1), units = \"Mb\")` para `format(object.size(dados_jan), units = \"Mb\")`. Trata-se de uma redução de 96.2% de espaço necessário para alocação dos dados.\n\n\n::: {.callout-note}\nQuando se usa comandos Unix, como no caso que usamos para a conexão `pipe()`, é necessário que todo o caminho do arquivo seja livre de espaços em branco. Por exemplo, o comando não funcionaria com `/dados de trabalhos/`.\n:::\n\n\n## Item e)\n\nPor último, realizamos a leitura de todos os arquivos obtidos do DataSUS filtrados pelo fabricante Janssen.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#obtencao de enderecos completos dos arquivos\nnomes_arquivos <- str_c(path, list.files(path), collapse = \" \")\n\n# leitura filtrada\ncomando_grep <- paste0(\"grep -e vacina_fabricante_nome -e JANSSEN \", nomes_arquivos)\n\ndados_jan2 <- vroom(pipe(comando_grep), \n                     locale = locale(\"br\", encoding = \"latin1\")\n)\n\n# tamanho\nformat(object.size(dados_jan2), units = \"Mb\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"224.4 Mb\"\n```\n:::\n:::\n\n\nDessa forma obtemos um objeto em memória menor do que o primeiro arquivo avaliado. Há um total de 407.582 linhas ocupando 224.4 Mb.\n\n\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}