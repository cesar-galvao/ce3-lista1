[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Apresentação",
    "section": "",
    "text": "Este é meu primeiro site feito em Quarto destinado a servir de treinamento e de entrega das listas de exercícios da disciplina de Computação em Massa (Tópicos em Estatística II), ofertada pelo Departamento de Estatística da Universidade de Brasília no segundo semestre letivo de 2022.\nTodo o código está disponível no repositório, com código público, que pode ser acessado pelo ícone no canto direito superior da tela."
  },
  {
    "objectID": "index.html#desenvolvimento",
    "href": "index.html#desenvolvimento",
    "title": "Apresentação",
    "section": "Desenvolvimento",
    "text": "Desenvolvimento\nO desenvolvimento deste curso ocorreu durante todo o ano de 2021, sob orientação do professor Guilherme Rodrigues e com colaboração do colega Gabriel José dos Reis Carvalho."
  },
  {
    "objectID": "about/about.html",
    "href": "about/about.html",
    "title": "César A. Galvão",
    "section": "",
    "text": "Entusiasta de Datavis, learning junkee, aspirante a cientista de dados, professor sempre. Se me tirar do computador, me leve para a natureza!\n\n\nUniversidade de Brasília | Brasília, DF\nPsicólogo | Jan 2007 - Dez 2011\nUniversidade de Brasília | Brasília, DF\nB.A. em Estatística | Jan 2019 - Atual\n\n\n\nEscola de Administração Fazendária - Esaf | Analista, líder de equipes | 2013 - 2019\nEscola Nacional de Administração Pública - Enap | Cientista de Dados | 2019 - Atual"
  },
  {
    "objectID": "lista_1/lista1.html",
    "href": "lista_1/lista1.html",
    "title": "Descrição",
    "section": "",
    "text": "Para o download dos dados dos estados do Acre, Alagoas, Amazonas e Amapá a partir do portal de dados abertos do DataSUS, o seguinte código foi utilizado. É possível utilizá-lo para replicação, no entanto os dados não estão hospedados no repositório."
  },
  {
    "objectID": "lista_1/questao2.html#item-a",
    "href": "lista_1/questao2.html#item-a",
    "title": "Questão 2",
    "section": "Item a)",
    "text": "Item a)\n\npacman::p_load(tidyverse, data.table, dtplyr, microbenchmark, geobr)\n\nO procedimento a seguir lê novamente todos os arquivos adquiridos, mantendo apenas as colunas estabelecimento_uf, vacina_descricao_dose e estabelecimento_municipio_codigo, e obtem os dados do pacote geobr para as regiões de saúde.\n\n# ler arquivos com map e fread(select = c(nome das colunas))\n\nread_select <- function(x) {\n  fread(x, select = c(\"estabelecimento_uf\", \"vacina_descricao_dose\", \"estabelecimento_municipio_codigo\"))\n}\n\ntabela <- map_df(arquivos, read_select)\n\ntabela$estabelecimento_municipio_codigo <- as.character(tabela$estabelecimento_municipio_codigo)\n\n# de fato, é um data.table\nclass(tabela)\n\n[1] \"data.table\" \"data.frame\""
  },
  {
    "objectID": "lista_1/questao2.html#item-b",
    "href": "lista_1/questao2.html#item-b",
    "title": "Questão 2",
    "section": "Item b)",
    "text": "Item b)\nDe acordo com sites do Governo Federal, as Regiões de Saúde são formadas por municípios fronteiriços que compartilham identidades culturais, econômicas e sociais, redes de comunicação e infraestrutura de transportes. A finalidade dessas regiões é integrar a organização, o planejamento e a execução de ações e serviços de saúde.\n\n# leitura de tabela intermediaria de codigos\ncodigos <- read.csv(\"../../dados_de_trabalhos/lista_1/Tabela_codigos.csv\",\n                    colClasses = \"character\") %>%\n  select(-X) %>%\n  janitor::clean_names()\n\n# realiza contagens\nvacinados <- tabela[, .N, \"estabelecimento_municipio_codigo\"]\n\n#faz os joins de forma mais clara que o merge\n#usar o merge permitiria realizar os joins sem a sumarização do passo anterior\njoins <- inner_join(codigos, r_saude, by = c(\"cod_regiao_de_saude\" = \"code_health_region\")) %>%\n  inner_join(vacinados, by = c(\"cod_ibge\" = \"estabelecimento_municipio_codigo\"))%>%\n  setDT()\n\n#quantidade de vacinados por regiao de saude\n# E\n#Condicionalmente, a faixa de vacinação por região de saúde (alta ou baixa, em relação à medianada distribuição de vacinações)\n\n# utilizando operacoes encadeadas de data.table\n\njoins <- joins[, .(N = sum(N)), cod_regiao_de_saude][, cobertura := ifelse(N > median(N), 'alta', 'baixa')][order(cod_regiao_de_saude),]%>% \n  group_by(cobertura) %>% \n  slice_max(order_by = N, n = 5)\n\njoins %>%\n  knitr::kable(\n    align = \"c\",\n    booktabs = TRUE,\n    longtable = TRUE,\n    linesep = \"\",\n    escape = FALSE,\n    col.names = c(\"Região de saúde\", \"Vacinações\", \"Cobertura\")\n    ) %>%\n  kableExtra::kable_styling(\n      position = \"center\",\n      latex_options = c(\"striped\", \"repeat_header\"),\n      stripe_color = \"gray!15\")\n\n\n\n \n  \n    Região de saúde \n    Vacinações \n    Cobertura \n  \n \n\n  \n    13001 \n    5594673 \n    alta \n  \n  \n    27001 \n    2803602 \n    alta \n  \n  \n    12002 \n    1121221 \n    alta \n  \n  \n    27007 \n    1018179 \n    alta \n  \n  \n    16001 \n    942405 \n    alta \n  \n  \n    13004 \n    362557 \n    baixa \n  \n  \n    27003 \n    360353 \n    baixa \n  \n  \n    13009 \n    359768 \n    baixa \n  \n  \n    27008 \n    328312 \n    baixa \n  \n  \n    27010 \n    317777 \n    baixa"
  },
  {
    "objectID": "lista_1/questao2.html#item-c",
    "href": "lista_1/questao2.html#item-c",
    "title": "Questão 2",
    "section": "Item c)",
    "text": "Item c)\nPara repetimos as operações anteriores com dtplyr, basta passar individualmente as tabelas tabela, codigos e r_saude usadas no passo anterior na função lazy_dt, realizar as operações de join já feitas com inner_join e, após os agrupamentos e sumarização necessários, conforme ja feito, passar o produto das operações em pipe para %>% as_tibble().\nEste fluxo de trabalho permite trabalhar com a classe de dados do pacote dtplyr e o último passo devolve um objeto tabular completo para o usuário."
  },
  {
    "objectID": "lista_1/questao2.html#item-d",
    "href": "lista_1/questao2.html#item-d",
    "title": "Questão 2",
    "section": "Item d)",
    "text": "Item d)\n–microbenchmark–"
  },
  {
    "objectID": "lista_1/questao1.html#item-a",
    "href": "lista_1/questao1.html#item-a",
    "title": "Questão 1",
    "section": "Item a)",
    "text": "Item a)\nVerificando a página do link disponibilizado e inspecionando links de dois estados, obtém-se:\n\nAC parte 1 – https://s3.sa-east-1.amazonaws.com/ckan.saude.gov.br/SIPNI/COVID/uf/uf%3DAC/part-00000-cebaa94c-82a9-46e2-8c12-9cc16a61b38b.c000.csv\nAC parte 2 – https://s3.sa-east-1.amazonaws.com/ckan.saude.gov.br/SIPNI/COVID/uf/uf%3DAC/part-00001-cebaa94c-82a9-46e2-8c12-9cc16a61b38b.c000.csv –\nAL parte 1 – https://s3.sa-east-1.amazonaws.com/ckan.saude.gov.br/SIPNI/COVID/uf/uf%3DAL/part-00000-cebaa94c-82a9-46e2-8c12-9cc16a61b38b.c000.csv\n\nNota-se que a diferenciação quanto à UF ocorre em uf%3D** e que a diferenciação quanto à parte do download ocorre logo em seguida em part-0000*, iniciando a contagem em zero. Além disso, fica evidente que se trata de um arquivo .csv.\nO código a seguir cria uma pasta, caso não exista, e varre a combinação de três partes para as UF: AC, AL, AM e AP.\n\npath <- \"../dados_de_trabalhos/lista_1/datasus/\"\n\n# verifica e cria pasta\nif(!dir.exists(path)){\n  dir.create(path)\n}\n\n# cria vetores sobre os quais se ira iterar\niterate <- tibble(\n  uf = rep(c('AC', 'AL', 'AM', 'AP'), each = 3),\n  partes = rep(c(0:2), 4)\n) %>%\n  transmute(caminho = paste0(\n      \"https://s3.sa-east-1.amazonaws.com/ckan.saude.gov.br/SIPNI/COVID/uf/uf%3D\",\n            uf,\n            \"/part-0000\",\n            partes,\n            \"-cebaa94c-82a9-46e2-8c12-9cc16a61b38b.c000.csv\"),\n      destfile = paste0(\n        path,uf, partes, \".csv\"\n      ))\n\n# varre os vetores realizando o download\nwalk2(iterate$caminho, iterate$destfile,\n      function(x, y) download.file(url = x, destfile = y))\n\nVemos a seguir que houve sucesso no download:\n\nlist.files(path)\n\n [1] \"AC0.csv\" \"AC1.csv\" \"AC2.csv\" \"AL0.csv\" \"AL1.csv\" \"AL2.csv\" \"AM0.csv\"\n [8] \"AM1.csv\" \"AM2.csv\" \"AP0.csv\" \"AP1.csv\" \"AP2.csv\""
  },
  {
    "objectID": "lista_1/questao1.html#item-b",
    "href": "lista_1/questao1.html#item-b",
    "title": "Questão 1",
    "section": "Item b)",
    "text": "Item b)\nCarregamos o pacote vroom usando a função pacman::p_load() e carregamos o primeiro dos arquivos, correspondente à primeira parte de dados para o estado do Acre.\nUtilizando a função dplyr::glimpse(), verificamos que há 553.953 observações de 32 variáveis neste banco de dados. Além disso, nota-se que a função vroom() identificou com sucesso diversos tipos de dados das colunas, inclusive de datas. No entanto, colunas com números identificadores foram classificadas como números, o que pode trazer problemas se o número, como ocorre com o cadastro de pessoa física, inicia em um zero.\n\npacman::p_load(tidyverse, vroom)\n\ndados1 <- vroom(paste0(path, \"AC0.csv\"))\nglimpse(dados1)\n\nRows: 553,953\nColumns: 32\n$ document_id                              <chr> \"625df13b-f8c3-4ac4-8947-ee51…\n$ paciente_id                              <chr> \"7cf8dee49735df8d59d105db77d9…\n$ paciente_idade                           <dbl> 57, 39, 9, 44, 68, 38, 43, 24…\n$ paciente_dataNascimento                  <date> 1965-07-28, 1982-03-20, 2012…\n$ paciente_enumSexoBiologico               <chr> \"M\", \"F\", \"M\", \"M\", \"M\", \"F\",…\n$ paciente_racaCor_codigo                  <chr> \"04\", \"03\", \"03\", \"04\", \"01\",…\n$ paciente_racaCor_valor                   <chr> \"AMARELA\", \"PARDA\", \"PARDA\", …\n$ paciente_endereco_coIbgeMunicipio        <dbl> 120050, 120040, 120013, 12004…\n$ paciente_endereco_coPais                 <dbl> 10, 10, 10, 10, 10, 10, 10, 1…\n$ paciente_endereco_nmMunicipio            <chr> \"SENA MADUREIRA\", \"RIO BRANCO…\n$ paciente_endereco_nmPais                 <chr> \"BRASIL\", \"BRASIL\", \"BRASIL\",…\n$ paciente_endereco_uf                     <chr> \"AC\", \"AC\", \"AC\", \"AC\", \"AC\",…\n$ paciente_endereco_cep                    <chr> \"69940\", \"69919\", \"69926\", NA…\n$ paciente_nacionalidade_enumNacionalidade <chr> \"B\", \"B\", \"B\", \"B\", \"B\", \"B\",…\n$ estabelecimento_valor                    <chr> \"6697151\", \"6917291\", \"200287…\n$ estabelecimento_razaoSocial              <chr> \"MINISTERIO DA SAUDE\", \"PREFE…\n$ estalecimento_noFantasia                 <chr> \"DISTRITO SANITARIO ESPECIAL …\n$ estabelecimento_municipio_codigo         <dbl> 120050, 120040, 120013, 12004…\n$ estabelecimento_municipio_nome           <chr> \"SENA MADUREIRA\", \"RIO BRANCO…\n$ estabelecimento_uf                       <chr> \"AC\", \"AC\", \"AC\", \"AC\", \"AC\",…\n$ vacina_grupoAtendimento_codigo           <chr> \"000701\", \"000923\", \"000207\",…\n$ vacina_grupoAtendimento_nome             <chr> \"Povos indígenas em terras in…\n$ vacina_categoria_codigo                  <dbl> 7, 9, NA, 14, 2, 2, 2, 2, 2, …\n$ vacina_categoria_nome                    <chr> \"Povos Indígenas\", \"Trabalhad…\n$ vacina_lote                              <chr> \"202001\", \"210139\", \"FP8290\",…\n$ vacina_fabricante_nome                   <chr> \"PFIZER\", \"SINOVAC/BUTANTAN\",…\n$ vacina_fabricante_referencia             <chr> \"28290\", \"Organization/611894…\n$ vacina_dataAplicacao                     <date> 2022-08-31, 2021-06-17, 2022…\n$ vacina_descricao_dose                    <chr> \"2º Reforço\", \"2ª Dose\", \"1ª …\n$ vacina_codigo                            <dbl> 87, 86, 99, 86, 87, 87, 85, 8…\n$ vacina_nome                              <chr> \"COVID-19 PFIZER - COMIRNATY\"…\n$ sistema_origem                           <chr> \"Novo PNI\", \"Novo PNI\", \"Novo…"
  },
  {
    "objectID": "lista_1/questao1.html#item-c",
    "href": "lista_1/questao1.html#item-c",
    "title": "Questão 1",
    "section": "Item c)",
    "text": "Item c)\nA seguir verificamos o tamanho em disco do arquivo que estamos explorando e o tamanho do objeto criado após a leitura para a memória.\nInteressantemente, parece haver uma pequena economia de bytes. No entanto, o espaço ocupado em memória é proporcionalmente mais custoso em relação ao que está no disco rígido.\n\n#tamanho em megabytes do arquivo\nfile.size(paste0(path, \"AC0.csv\"))*10^(-6)\n\n[1] 283.0886\n\n#tamanho do objeto\nformat(object.size(dados1), units = \"Mb\")\n\n[1] \"256.6 Mb\""
  },
  {
    "objectID": "lista_1/questao1.html#item-d",
    "href": "lista_1/questao1.html#item-d",
    "title": "Questão 1",
    "section": "Item d)",
    "text": "Item d)\nQuando filtramos o arquivo diretamente no procedimento de leitura mediante a utilização de uma conexão pipe() para filtrar as vacinas da Janssen, verificamos que apenas 19.623 linhas foram incluídas, assim como todas as 32 variáveis que descrevem cada observação.\n\n# leitura filtrada\ncomando_grep <- \"grep -e vacina_fabricante_nome -e JANSSEN ../../dados_de_trabalhos/lista_1/datasus/AC0.csv\"\n\ndados_jan <- vroom(pipe(comando_grep), \n                     locale = locale(\"br\", encoding = \"latin1\")\n)\n\n# tamanho\nformat(object.size(dados_jan), units = \"Mb\")\n\n[1] \"9.8 Mb\"\n\n\nQuanto ao tamanho do objeto em memória, reduzimos de format(object.size(dados1), units = \"Mb\") para format(object.size(dados_jan), units = \"Mb\"). Trata-se de uma redução de 96.2% de espaço necessário para alocação dos dados.\n\n\n\n\n\n\nNote\n\n\n\nQuando se usa comandos Unix, como no caso que usamos para a conexão pipe(), é necessário que todo o caminho do arquivo seja livre de espaços em branco. Por exemplo, o comando não funcionaria com /dados de trabalhos/."
  },
  {
    "objectID": "lista_1/questao1.html#item-e",
    "href": "lista_1/questao1.html#item-e",
    "title": "Questão 1",
    "section": "Item e)",
    "text": "Item e)\nPor último, realizamos a leitura de todos os arquivos obtidos do DataSUS filtrados pelo fabricante Janssen.\n\n#obtencao de enderecos completos dos arquivos\nnomes_arquivos <- str_c(path, list.files(path), collapse = \" \")\n\n# leitura filtrada\ncomando_grep <- paste0(\"grep -e vacina_fabricante_nome -e JANSSEN \", nomes_arquivos)\n\ndados_jan2 <- vroom(pipe(comando_grep), \n                     locale = locale(\"br\", encoding = \"latin1\")\n)\n\n# tamanho\nformat(object.size(dados_jan2), units = \"Mb\")\n\n[1] \"224.4 Mb\"\n\n\nDessa forma obtemos um objeto em memória menor do que o primeiro arquivo avaliado. Há um total de 407.582 linhas ocupando 224.4 Mb."
  }
]